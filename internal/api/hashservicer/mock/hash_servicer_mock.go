// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/hashservicer/hash_servicer.go

// Package mock_hashservicer is a generated GoMock package.
package mock_hashservicer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vasiliyantufev/go-advanced-devops/internal/models"
)

// MockHashServices is a mock of HashServices interface.
type MockHashServices struct {
	ctrl     *gomock.Controller
	recorder *MockHashServicesMockRecorder
}

// MockHashServicesMockRecorder is the mock recorder for MockHashServices.
type MockHashServicesMockRecorder struct {
	mock *MockHashServices
}

// NewMockHashServices creates a new mock instance.
func NewMockHashServices(ctrl *gomock.Controller) *MockHashServices {
	mock := &MockHashServices{ctrl: ctrl}
	mock.recorder = &MockHashServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashServices) EXPECT() *MockHashServicesMockRecorder {
	return m.recorder
}

// GenerateHash mocks base method.
func (m *MockHashServices) GenerateHash(metric models.JSONMetrics) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateHash", metric)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateHash indicates an expected call of GenerateHash.
func (mr *MockHashServicesMockRecorder) GenerateHash(metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHash", reflect.TypeOf((*MockHashServices)(nil).GenerateHash), metric)
}

// IsEnabled mocks base method.
func (m *MockHashServices) IsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnabled indicates an expected call of IsEnabled.
func (mr *MockHashServicesMockRecorder) IsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockHashServices)(nil).IsEnabled))
}

// ValidHashServer mocks base method.
func (m *MockHashServices) ValidHashServer(clientMetric models.JSONMetrics) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidHashServer", clientMetric)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidHashServer indicates an expected call of ValidHashServer.
func (mr *MockHashServicesMockRecorder) ValidHashServer(clientMetric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidHashServer", reflect.TypeOf((*MockHashServices)(nil).ValidHashServer), clientMetric)
}
